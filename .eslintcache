[{"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\index.js":"1","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\reportWebVitals.js":"2","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\App.js":"3","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\main.jsx":"4","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\movieDetails.jsx":"5","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\movieCard.jsx":"6","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\prevButton.jsx":"7","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\nextButton.jsx":"8","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\movieCardScrollX.jsx":"9","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\footer.jsx":"10","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\moviesStyling.jsx":"11","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\countingStar.jsx":"12","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\animation\\useScroll.js":"13","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\animation\\animate.js":"14"},{"size":658,"mtime":1607674570636,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":384,"mtime":1608350403616,"results":"18","hashOfConfig":"16"},{"size":13637,"mtime":1608282695545,"results":"19","hashOfConfig":"16"},{"size":13152,"mtime":1608280901245,"results":"20","hashOfConfig":"16"},{"size":1439,"mtime":1608350076438,"results":"21","hashOfConfig":"16"},{"size":569,"mtime":1608268615410,"results":"22","hashOfConfig":"16"},{"size":571,"mtime":1608268577317,"results":"23","hashOfConfig":"16"},{"size":1301,"mtime":1608350329516,"results":"24","hashOfConfig":"16"},{"size":1510,"mtime":1608281813792,"results":"25","hashOfConfig":"16"},{"size":1566,"mtime":1608268655844,"results":"26","hashOfConfig":"16"},{"size":585,"mtime":1608183416578,"results":"27","hashOfConfig":"16"},{"size":347,"mtime":1608274078355,"results":"28","hashOfConfig":"16"},{"size":753,"mtime":1608348794970,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"19nf33a",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\index.js",[],["60","61"],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\reportWebVitals.js",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\App.js",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\main.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\movieDetails.jsx",["62"],"import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport ReactPlayer from 'react-player';\r\nimport ShowMoreText from 'react-show-more-text';\r\nimport PrevButton from './common/prevButton';\r\nimport NextButton from './common/nextButton';\r\nimport MovieCardScrollX from './common/movieCardScrollX';\r\nimport { Spin } from 'antd';\r\nimport UnknownPerson from '../images/unknown-person.png';\r\nimport Incognito from '../images/incognito.jpg';\r\nimport noImage from '../images/no-image.jpg';\r\nimport { CountingStar } from './common/countingStar';\r\n\r\nconst MovieDetails = ({\r\n  onClickMovieID,\r\n  setOnClickMovieID,\r\n  setIsLoading,\r\n  isLoading,\r\n  statusCode,\r\n  setStatusCode,\r\n}) => {\r\n  const [movieInfo, setMovieInfo] = useState();\r\n  const [movieVideo, setMovieVideo] = useState([]);\r\n  const [movieCast, setMovieCast] = useState([]);\r\n  const [movieReviews, setMovieReviews] = useState([]);\r\n  const [reviewsPage, setReviewsPage] = useState(1);\r\n  const [reviewsTotalPage, setReviewsTotalPage] = useState(0);\r\n  const [similarMovies, setSimilarMovies] = useState([]);\r\n\r\n  const youtubeURL = `https://www.youtube.com/watch?v=`;\r\n\r\n  // GETTING ALL THE DATA OF THAT MOVIE INCLUDING VIDEO, CAST AND SIMILAR MOVIES\r\n  useEffect(() => {\r\n    async function dataFetch() {\r\n      try {\r\n        const { data: movieData } = await axios.get(\r\n          `https://api.themoviedb.org/3/movie/${onClickMovieID}?api_key=${process.env.REACT_APP_API_KEY}`\r\n        );\r\n        const { data: video } = await axios.get(\r\n          `https://api.themoviedb.org/3/movie/${onClickMovieID}/videos?api_key=${process.env.REACT_APP_API_KEY}`\r\n        );\r\n        const { data: cast } = await axios.get(\r\n          `https://api.themoviedb.org/3/movie/${onClickMovieID}/credits?api_key=${process.env.REACT_APP_API_KEY}`\r\n        );\r\n        const { data: similar } = await axios.get(\r\n          `https://api.themoviedb.org/3/movie/${onClickMovieID}/similar?api_key=${process.env.REACT_APP_API_KEY}`\r\n        );\r\n        setMovieInfo(movieData);\r\n        setMovieVideo(video.results);\r\n        setMovieCast(cast.cast);\r\n        setSimilarMovies(similar.results);\r\n        setIsLoading(false);\r\n      } catch (e) {\r\n        setStatusCode(true);\r\n        console.log(e);\r\n      }\r\n    }\r\n    dataFetch();\r\n  }, [onClickMovieID, isLoading]);\r\n\r\n  // GETTING REVIEWS OF SELECTED MOVIE. IF MANY PAGES, ONLY THIS USE EFFECT WILL RE-RENDER.\r\n  useEffect(() => {\r\n    async function reviewsFetch() {\r\n      const { data: reviews } = await axios.get(\r\n        `https://api.themoviedb.org/3/movie/${onClickMovieID}/reviews?api_key=${process.env.REACT_APP_API_KEY}&page=${reviewsPage}`\r\n      );\r\n      setMovieReviews(reviews.results);\r\n      setReviewsTotalPage(reviews.total_pages);\r\n    }\r\n    reviewsFetch();\r\n  }, [reviewsPage, onClickMovieID]);\r\n\r\n  // CHECK IF USER USE OTHER LINKS PROFILE, NULL PROFILE AND HAS PROFILE\r\n  const userImgChecker = (img) => {\r\n    if (img.includes('https')) {\r\n      return (\r\n        <img\r\n          src={Incognito}\r\n          alt='img'\r\n          className='md:w-4/5 w-full rounded-full mx-auto'\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/w500${img}`}\r\n          alt='img'\r\n          className='md:w-4/5 w-full rounded-full mx-auto'\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  // RESET REVIEWS PAGE IF WE CLICK SIMILAR MOVIES.\r\n  const resetReviewsPage = (id) => {\r\n    setOnClickMovieID(id);\r\n    setReviewsPage(1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isLoading ? (\r\n        <div className='ant-modal-wrap ant-modal-body'>\r\n          <div className='container mx-auto'>\r\n            {movieVideo.length < 1 ? (\r\n              <h1 className='italic text-lg text-center h-20'>\r\n                Trailer is not yet available\r\n              </h1>\r\n            ) : (\r\n              <div className='w-full'>\r\n                <ReactPlayer\r\n                  url={youtubeURL + movieVideo[0].key}\r\n                  controls={true}\r\n                  className='modal-w-full'\r\n                />\r\n              </div>\r\n            )}\r\n            <div className='grid xl:grid-cols-12 md:grid-cols-10 sm:grid-cols-7 grid-cols-1 py-5 gap-4'>\r\n              <div className='2xl:col-span-2 xl:col-span-3 md:col-span-3 col-start-1 sm:col-span-3'>\r\n                {movieInfo.poster_path !== null ? (\r\n                  <img\r\n                    src={`https://image.tmdb.org/t/p/w500${movieInfo.poster_path}`}\r\n                    alt='img'\r\n                    className='w-full h-72 rounded'\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    src={noImage}\r\n                    alt='img'\r\n                    className='w-full h-72 rounded'\r\n                  />\r\n                )}\r\n              </div>\r\n              <div className='2xl:col-span-10 2xl:col-start-3 xl:col-span-9 xl:col-start-4 md:col-span-7 md:col-start-4 sm:col-span-4 sm:col-start-4'>\r\n                <div className='flex gap-1 text-2xl font-semibold flex-wrap'>\r\n                  <h1>\r\n                    {movieInfo.title || movieInfo.original_title}\r\n                    <span className='ml-1'>\r\n                      ({movieInfo.release_date.split('-')[0]})\r\n                    </span>\r\n                  </h1>\r\n                </div>\r\n                <div className='flex gap-1 text-lg py-1'>\r\n                  <h1>Genre:</h1>\r\n                  <div className='flex flex-wrap gap-3 text-base align-middle'>\r\n                    {movieInfo.genres.map((genre) => (\r\n                      <p\r\n                        key={genre.id}\r\n                        className='px-2 py-0 border rounded-full'\r\n                      >\r\n                        {genre.name}\r\n                      </p>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <p className='text-lg'>Rating: {movieInfo.vote_average}</p>\r\n                  <div className='flex flex-wrap sm:gap-1 gap-4'>\r\n                    {CountingStar(movieInfo.vote_average)}\r\n                  </div>\r\n                </div>\r\n                <div className='py-3'>\r\n                  <p className='font-semibold'>Overview</p>\r\n                  {movieInfo.overview.length < 1 ? (\r\n                    <h1 className='italic py-1'>Ongoing.</h1>\r\n                  ) : (\r\n                    <p className='italic py-1'>{movieInfo.overview}</p>\r\n                  )}\r\n                </div>\r\n                <div className='flex gap-5 pt-4 flex-wrap'>\r\n                  <p>\r\n                    Movie Length:\r\n                    <span className='ml-1 italic'>{movieInfo.runtime}mins</span>\r\n                  </p>\r\n                  <p>\r\n                    Status: <span className='italic'>{movieInfo.status}</span>\r\n                  </p>\r\n                  <a href={movieInfo.homepage} className='truncate'>\r\n                    {movieInfo.homepage}\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='border rounded'>\r\n              <h1 className='font-semibold text-xl text-center pt-5'>Cast</h1>\r\n              <div className='flex overflow-x-auto py-3'>\r\n                {movieCast.length < 1 ? (\r\n                  <h1 className='italic w-full text-center'>\r\n                    No cast added yet.\r\n                  </h1>\r\n                ) : (\r\n                  movieCast.map((eachCast) => (\r\n                    <div\r\n                      key={eachCast.id}\r\n                      className={`overflow-hidden ${\r\n                        movieCast.length > 4 ? 'minw-12' : 'w-48'\r\n                      } `}\r\n                    >\r\n                      {eachCast.profile_path ? (\r\n                        <img\r\n                          src={`https://image.tmdb.org/t/p/w500${eachCast.profile_path}`}\r\n                          alt='img'\r\n                          className='w-4/6 mx-auto h-32 rounded-full border'\r\n                        />\r\n                      ) : (\r\n                        <img\r\n                          src={UnknownPerson}\r\n                          alt='img'\r\n                          className='w-4/6 mx-auto h-32 rounded-full border'\r\n                        />\r\n                      )}\r\n\r\n                      <div className='text-center py-2'>\r\n                        <h1 className='font-semibold'>{eachCast.name}</h1>\r\n                        <p>{eachCast.character}</p>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className='py-8'>\r\n              <h1 className='font-semibold text-xl text-center pt-5'>\r\n                Reviews and Comments\r\n              </h1>\r\n              <div>\r\n                {movieReviews.length < 1 ? (\r\n                  <h1 className='text-center italic py-3'>\r\n                    No Reviews and Comments Yet\r\n                  </h1>\r\n                ) : (\r\n                  movieReviews.map((review) => (\r\n                    <div\r\n                      key={review.id}\r\n                      className='grid grid-cols-8 py-5 sm:gap-5 gap-1'\r\n                    >\r\n                      <div className='col-start-1 sm:col-span-1 col-span-2'>\r\n                        <span>\r\n                          {review.author_details.avatar_path !== null ? (\r\n                            userImgChecker(review.author_details.avatar_path)\r\n                          ) : (\r\n                            <img\r\n                              src={Incognito}\r\n                              alt='img'\r\n                              className='w-4/5 rounded-full mx-auto'\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </div>\r\n                      <div className='sm:col-start-2 sm:col-span-7 col-start-3 col-span-6'>\r\n                        <h1 className='font-semibold text-lg'>\r\n                          {review.author}\r\n                        </h1>\r\n                        <p>\r\n                          Rating:\r\n                          <span className='ml-1'>\r\n                            {CountingStar(review.author_details.rating)}\r\n                          </span>\r\n                        </p>\r\n                        <p className='italic'>Posted on: {review.created_at}</p>\r\n\r\n                        {/*/////////////////////// Show more text library ///////////////////////*/}\r\n                        <ShowMoreText\r\n                          more='Show more'\r\n                          less='Show less'\r\n                          className='py-3'\r\n                          expanded={false}\r\n                        >\r\n                          {review.content}\r\n                        </ShowMoreText>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n              <div className='flex gap-5 justify-center'>\r\n                {reviewsPage !== 1 && (\r\n                  <PrevButton\r\n                    currentPage={reviewsPage}\r\n                    setCurrentPage={setReviewsPage}\r\n                  />\r\n                )}\r\n\r\n                {reviewsTotalPage < 1 ? (\r\n                  ''\r\n                ) : (\r\n                  <p className='h-full my-auto'>\r\n                    Page {reviewsPage} of {reviewsTotalPage}\r\n                  </p>\r\n                )}\r\n                {reviewsPage !== reviewsTotalPage && reviewsTotalPage > 1 && (\r\n                  <NextButton\r\n                    currentPage={reviewsPage}\r\n                    setCurrentPage={setReviewsPage}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div className='pt-5'>\r\n                <h1 className='py-1 font-semibold text-lg'>Similar Movies</h1>\r\n                <div className='p-5 border rounded bg-white flex overflow-x-auto gap-5'>\r\n                  {similarMovies.length < 1 ? (\r\n                    <h1 className='italic h-full my-auto'>\r\n                      No Similar Movies Yet. Ongoing To Find.\r\n                    </h1>\r\n                  ) : (\r\n                    similarMovies.map((movie) => (\r\n                      <div\r\n                        key={movie.id}\r\n                        onClick={() => resetReviewsPage(movie.id)}\r\n                      >\r\n                        <Link to={`/movie/${movie.id}`} style={{ top: 0 }}>\r\n                          <MovieCardScrollX movie={movie} />\r\n                        </Link>\r\n                      </div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Spin className='container mx-auto bg-force-remove' size='large' />\r\n      )}\r\n\r\n      {statusCode && (\r\n        <h1 className='text-center text-red-500'>\r\n          Status: 404 Not Found. Sorry, the data your trying to fetch cannot be\r\n          found.\r\n        </h1>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\movieCard.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\prevButton.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\nextButton.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\movieCardScrollX.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\footer.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\moviesStyling.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\countingStar.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\animation\\useScroll.js",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\animation\\animate.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":60,"column":6,"nodeType":"69","endLine":60,"endColumn":33,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setIsLoading' and 'setStatusCode'. Either include them or remove the dependency array. If 'setIsLoading' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["73"],"no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},"Update the dependencies array to be: [onClickMovieID, isLoading, setIsLoading, setStatusCode]",{"range":"76","text":"77"},[2341,2368],"[onClickMovieID, isLoading, setIsLoading, setStatusCode]"]