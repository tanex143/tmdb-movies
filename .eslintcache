[{"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\index.js":"1","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\reportWebVitals.js":"2","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\App.js":"3","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\main.jsx":"4","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\trendingMovies.jsx":"5","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\upcomingMovies.jsx":"6","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\nowPlaying.jsx":"7","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\movieDetails.jsx":"8","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\movieCard.jsx":"9","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\prevButton.jsx":"10","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\nextButton.jsx":"11","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\movieCardScrollX.jsx":"12","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\footer.jsx":"13"},{"size":658,"mtime":1607674570636,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":970,"mtime":1608092712587,"results":"17","hashOfConfig":"15"},{"size":6429,"mtime":1608102755039,"results":"18","hashOfConfig":"15"},{"size":3464,"mtime":1608093842794,"results":"19","hashOfConfig":"15"},{"size":3340,"mtime":1608092853777,"results":"20","hashOfConfig":"15"},{"size":3404,"mtime":1608092850588,"results":"21","hashOfConfig":"15"},{"size":12276,"mtime":1608104899036,"results":"22","hashOfConfig":"15"},{"size":1080,"mtime":1608103668776,"results":"23","hashOfConfig":"15"},{"size":547,"mtime":1607679615339,"results":"24","hashOfConfig":"15"},{"size":549,"mtime":1607954980666,"results":"25","hashOfConfig":"15"},{"size":1113,"mtime":1608104124250,"results":"26","hashOfConfig":"15"},{"size":1106,"mtime":1608092383048,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"19nf33a",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\index.js",[],["56","57"],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\reportWebVitals.js",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\App.js",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\main.jsx",["58","59","60"],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\trendingMovies.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\upcomingMovies.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\nowPlaying.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\movieDetails.jsx",["61"],"import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport ReactPlayer from 'react-player';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStar as solidStar } from '@fortawesome/free-solid-svg-icons';\r\nimport { faStar as regularStar } from '@fortawesome/free-regular-svg-icons';\r\nimport ShowMoreText from 'react-show-more-text';\r\nimport PrevButton from './common/prevButton';\r\nimport NextButton from './common/nextButton';\r\nimport MovieCardScrollX from './common/movieCardScrollX';\r\nimport { Spin } from 'antd';\r\nimport UnknownPerson from '../images/unknown-person.png';\r\nimport Incognito from '../images/incognito.jpg';\r\nimport noImage from '../images/no-image.jpg';\r\n\r\nconst MovieDetails = ({ onClickMovieID, setIsLoading, isLoading }) => {\r\n  const [movieInfo, setMovieInfo] = useState();\r\n  const [movieVideo, setMovieVideo] = useState([]);\r\n  const [movieCast, setMovieCast] = useState([]);\r\n  const [movieReviews, setMovieReviews] = useState([]);\r\n  const [reviewsPage, setReviewsPage] = useState(1);\r\n  const [reviewsTotalPage, setReviewsTotalPage] = useState(0);\r\n  const [similarMovies, setSimilarMovies] = useState([]);\r\n\r\n  const youtubeURL = `https://www.youtube.com/watch?v=`;\r\n\r\n  useEffect(() => {\r\n    async function dataFetch() {\r\n      const { data: movieData } = await axios.get(\r\n        `https://api.themoviedb.org/3/movie/${onClickMovieID}?api_key=${process.env.REACT_APP_API_KEY}`\r\n      );\r\n      const { data: video } = await axios.get(\r\n        `https://api.themoviedb.org/3/movie/${onClickMovieID}/videos?api_key=${process.env.REACT_APP_API_KEY}`\r\n      );\r\n      const { data: cast } = await axios.get(\r\n        `https://api.themoviedb.org/3/movie/${onClickMovieID}/credits?api_key=${process.env.REACT_APP_API_KEY}`\r\n      );\r\n      const { data: reviews } = await axios.get(\r\n        `https://api.themoviedb.org/3/movie/${onClickMovieID}/reviews?api_key=${process.env.REACT_APP_API_KEY}&page=${reviewsPage}`\r\n      );\r\n      const { data: similar } = await axios.get(\r\n        `https://api.themoviedb.org/3/movie/${onClickMovieID}/similar?api_key=${process.env.REACT_APP_API_KEY}`\r\n      );\r\n      setMovieInfo(movieData);\r\n      console.log('movie selected', movieData);\r\n      setMovieVideo(video.results);\r\n      console.log('this is video', video.results);\r\n      setMovieCast(cast.cast);\r\n      console.log('this is cast', cast);\r\n      setMovieReviews(reviews.results);\r\n      setReviewsTotalPage(reviews.total_pages);\r\n      console.log('this is reviews', reviews);\r\n      setSimilarMovies(similar.results);\r\n      console.log('this is similar movies', similar);\r\n      setIsLoading(!isLoading);\r\n    }\r\n    dataFetch();\r\n  }, [onClickMovieID]);\r\n\r\n  const starRating = () => {\r\n    const stars = [];\r\n    const rating = Math.floor(movieInfo.vote_average);\r\n\r\n    for (let i = 1; i <= 10; i++) {\r\n      if (i <= rating) {\r\n        stars.push(<FontAwesomeIcon icon={solidStar} key={i} alt='star' />);\r\n      } else {\r\n        stars.push(<FontAwesomeIcon icon={regularStar} key={i} alt='star' />);\r\n      }\r\n    }\r\n\r\n    return stars;\r\n  };\r\n\r\n  const reviewsRating = (rate) => {\r\n    const stars = [];\r\n    const rating = Math.floor(rate);\r\n\r\n    for (let i = 1; i <= 10; i++) {\r\n      if (i <= rating) {\r\n        stars.push(<FontAwesomeIcon icon={solidStar} key={i} alt='star' />);\r\n      } else {\r\n        stars.push(<FontAwesomeIcon icon={regularStar} key={i} alt='star' />);\r\n      }\r\n    }\r\n\r\n    return stars;\r\n  };\r\n\r\n  const userImgChecker = (img) => {\r\n    if (img.includes('https')) {\r\n      return (\r\n        <img src={Incognito} alt='img' className='w-4/5 rounded-full mx-auto' />\r\n      );\r\n    } else {\r\n      return (\r\n        <img\r\n          src={`https://image.tmdb.org/t/p/w500${img}`}\r\n          alt='img'\r\n          className='w-4/5 rounded-full mx-auto'\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isLoading ? (\r\n        <div className='ant-modal-wrap ant-modal-body'>\r\n          <div className='container mx-auto'>\r\n            {movieVideo.length < 1 ? (\r\n              <h1 className='italic text-lg text-center h-20'>\r\n                Trailer is not yet available\r\n              </h1>\r\n            ) : (\r\n              <div className='w-full'>\r\n                <ReactPlayer\r\n                  url={youtubeURL + movieVideo[0].key}\r\n                  controls={true}\r\n                  className='modal-w-full'\r\n                />\r\n              </div>\r\n            )}\r\n            <div className='grid grid-cols-10 py-5 gap-4'>\r\n              <div className='col-span-3 col-start-1'>\r\n                {movieInfo.poster_path !== null ? (\r\n                  <img\r\n                    src={`https://image.tmdb.org/t/p/w500${movieInfo.poster_path}`}\r\n                    alt='img'\r\n                    className='w-full h-72 rounded'\r\n                  />\r\n                ) : (\r\n                  <img\r\n                    src={noImage}\r\n                    alt='img'\r\n                    className='w-full h-72 rounded'\r\n                  />\r\n                )}\r\n              </div>\r\n              <div className='col-span-7 col-start-4'>\r\n                <div className='flex gap-1 text-2xl font-semibold'>\r\n                  <h1>{movieInfo.title || movieInfo.original_title}</h1>\r\n                  <p>({movieInfo.release_date.split('-')[0]})</p>\r\n                </div>\r\n                <div className='flex gap-1 text-lg py-1'>\r\n                  <h1>Genre:</h1>\r\n                  <div className='flex gap-3 text-base align-middle'>\r\n                    {movieInfo.genres.map((genre) => (\r\n                      <p\r\n                        key={genre.id}\r\n                        className='px-2 py-0 border rounded-full'\r\n                      >\r\n                        {genre.name}\r\n                      </p>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <p className='text-lg'>Rating: {movieInfo.vote_average}</p>\r\n                  <div className='flex gap-1'>{starRating()}</div>\r\n                </div>\r\n                <div className='py-3'>\r\n                  <p className='font-semibold'>Overview</p>\r\n                  {movieInfo.overview.length < 1 ? (\r\n                    <h1 className='italic py-1'>Ongoing.</h1>\r\n                  ) : (\r\n                    <p className='italic py-1'>{movieInfo.overview}</p>\r\n                  )}\r\n                </div>\r\n                <div className='flex gap-5 pt-4 flex-wrap'>\r\n                  <p>\r\n                    Movie Length:\r\n                    <span className='ml-1 italic'>{movieInfo.runtime}mins</span>\r\n                  </p>\r\n                  <p>\r\n                    Status: <span className='italic'>{movieInfo.status}</span>\r\n                  </p>\r\n                  <a href={movieInfo.homepage} className='truncate'>\r\n                    {movieInfo.homepage}\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='border rounded'>\r\n              <h1 className='font-semibold text-xl text-center pt-5'>Cast</h1>\r\n              <div className='flex overflow-x-auto py-3'>\r\n                {movieCast.map((eachCast) => (\r\n                  <div\r\n                    key={eachCast.id}\r\n                    className={`overflow-hidden ${\r\n                      movieCast.length > 3 ? 'minw-12' : 'w-48'\r\n                    } `}\r\n                  >\r\n                    {eachCast.profile_path ? (\r\n                      <img\r\n                        src={`https://image.tmdb.org/t/p/w500${eachCast.profile_path}`}\r\n                        alt='img'\r\n                        className='w-4/6 mx-auto h-32 rounded-full border'\r\n                      />\r\n                    ) : (\r\n                      <img\r\n                        src={UnknownPerson}\r\n                        alt='img'\r\n                        className='w-4/6 mx-auto h-32 rounded-full border'\r\n                      />\r\n                    )}\r\n\r\n                    <div className='text-center py-2'>\r\n                      <h1 className='font-semibold'>{eachCast.name}</h1>\r\n                      <p>{eachCast.character}</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            <div className='py-8'>\r\n              <h1 className='font-semibold text-xl text-center pt-5'>\r\n                Reviews and Comments\r\n              </h1>\r\n              <div>\r\n                {movieReviews.length < 1 ? (\r\n                  <h1 className='text-center italic py-3'>\r\n                    No Reviews and Comments Yet\r\n                  </h1>\r\n                ) : (\r\n                  movieReviews.map((review) => (\r\n                    <div\r\n                      key={review.id}\r\n                      className='grid grid-cols-8 py-5 gap-5'\r\n                    >\r\n                      <div className='col-start-1'>\r\n                        <span>\r\n                          {review.author_details.avatar_path !== null ? (\r\n                            userImgChecker(review.author_details.avatar_path)\r\n                          ) : (\r\n                            <img\r\n                              src={Incognito}\r\n                              alt='img'\r\n                              className='w-4/5 rounded-full mx-auto'\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </div>\r\n                      <div className='col-start-2 col-span-7'>\r\n                        <h1 className='font-semibold text-lg'>\r\n                          {review.author}\r\n                        </h1>\r\n                        <p>\r\n                          Rating:\r\n                          <span className='ml-1'>\r\n                            {reviewsRating(review.author_details.rating)}\r\n                          </span>\r\n                        </p>\r\n                        <p className='italic'>Posted on: {review.created_at}</p>\r\n\r\n                        {/*/////////////////////// Show more text library ///////////////////////*/}\r\n                        <ShowMoreText\r\n                          more='Show more'\r\n                          less='Show less'\r\n                          className='py-3'\r\n                          expanded={false}\r\n                        >\r\n                          {review.content}\r\n                        </ShowMoreText>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n              <div className='flex gap-5 justify-center'>\r\n                {reviewsPage !== 1 && (\r\n                  <PrevButton\r\n                    currentPage={reviewsPage}\r\n                    setCurrentPage={setReviewsPage}\r\n                  />\r\n                )}\r\n\r\n                {reviewsTotalPage < 1 ? (\r\n                  ''\r\n                ) : (\r\n                  <p className='h-full my-auto'>\r\n                    Page {reviewsPage} of {reviewsTotalPage}\r\n                  </p>\r\n                )}\r\n                {reviewsPage !== reviewsTotalPage && reviewsPage < 1 && (\r\n                  <NextButton\r\n                    currentPage={reviewsPage}\r\n                    setCurrentPage={setReviewsPage}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div className='pt-5'>\r\n                <h1 className='py-1 font-semibold text-lg'>Similar Movies</h1>\r\n                <div className='p-5 border rounded bg-white flex overflow-x-auto gap-5'>\r\n                  {similarMovies.length < 1 ? (\r\n                    <h1 className='italic h-full my-auto'>\r\n                      No Similar Movies Yet. Ongoing To Find.\r\n                    </h1>\r\n                  ) : (\r\n                    similarMovies.map((movie) => (\r\n                      <MovieCardScrollX key={movie.id} movie={movie} />\r\n                    ))\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Spin className='container mx-auto bg-force-remove' size='large' />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n","C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\movieCard.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\prevButton.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\nextButton.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\common\\movieCardScrollX.jsx",[],"C:\\Users\\TaneXJunioR\\React Project\\tmdb-movies\\src\\components\\footer.jsx",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":19,"column":31,"nodeType":"68","messageId":"69","endLine":19,"endColumn":53},{"ruleId":"66","severity":1,"message":"70","line":20,"column":10,"nodeType":"68","messageId":"69","endLine":20,"endColumn":27},{"ruleId":"71","severity":1,"message":"72","line":51,"column":6,"nodeType":"73","endLine":51,"endColumn":33,"suggestions":"74"},{"ruleId":"71","severity":1,"message":"75","line":58,"column":6,"nodeType":"73","endLine":58,"endColumn":22,"suggestions":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'setSearchedCurrentPage' is assigned a value but never used.","Identifier","unusedVar","'searchedTotalPage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchedCurrentPage'. Either include it or remove the dependency array.","ArrayExpression",["79"],"React Hook useEffect has missing dependencies: 'isLoading', 'reviewsPage', and 'setIsLoading'. Either include them or remove the dependency array. If 'setIsLoading' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["80"],"no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [toFetchData, searchedText, searchedCurrentPage]",{"range":"85","text":"86"},"Update the dependencies array to be: [isLoading, onClickMovieID, reviewsPage, setIsLoading]",{"range":"87","text":"88"},[2136,2163],"[toFetchData, searchedText, searchedCurrentPage]",[2717,2733],"[isLoading, onClickMovieID, reviewsPage, setIsLoading]"]